/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features feature_list, let_list;
nonterminal Feature feature;
nonterminal Formals formal_list;
nonterminal formalc formal;
nonterminal Expressions expr_list_empty;
nonterminal Expressions expr_list_geq1;
nonterminal Expressions expr_list_comma;
nonterminal Expressions expr_list_darrow;
nonterminal Expressions expr_list_assign;
nonterminal Expression expr;
nonterminal typcase case;
nonterminal Cases casebr_list;
nonterminal branch casebr;
nonterminal let letbr;


/* Precedence declarations go here. */
precedence right ASSIGN; 
precedence left NOT;
precedence nonassoc LE, LT, EQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;


/* Grammars below */

program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}

	// error cases
	| CLASS TYPEID:n LBRACE feature_list:f error SEMI
	    {: :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE feature_list:f error SEMI
	    {: :}
	| CLASS error LBRACE feature_list:f RBRACE SEMI
	    {: :}
	| CLASS error INHERITS TYPEID:p LBRACE feature_list:f RBRACE SEMI
	    {: :}
	| CLASS TYPEID:n LBRACE error RBRACE SEMI
	    {: :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE error RBRACE SEMI
	    {: :}
		
	;

/* zero or more features */
feature_list
	// no feature
	::=	
		{: RESULT = new Features(curr_lineno()); :}
	
	// one or more features
	| 	feature_list:fl feature:f SEMI
		{: RESULT = fl.appendElement(f);
System.out.println("Feature_list append:" + fl); :}
	// one or more features error case
	| 	feature_list:fl error SEMI
		{: :}
	| 	error feature:f SEMI
		{: :}
	| 	error SEMI
		{: :}
   	;

    
/* feature includes attribute and method */
feature
	// attribute without inital value
	::=	OBJECTID:obj COLON TYPEID:type
		{: RESULT = new attr(curr_lineno(), obj, type, new no_expr(curr_lineno())); :}

	|	error COLON TYPEID:type
		{: :}

	|	OBJECTID:obj COLON error
		{: :}

	|	OBJECTID:obj error
		{: :}
	
	// attribute with initial value
	|	OBJECTID:obj COLON TYPEID:type ASSIGN expr:e
		{: RESULT = new attr(curr_lineno(), obj, type, e); :}
	
	// method without argument
	|	OBJECTID:obj LPAREN RPAREN COLON TYPEID:type LBRACE expr:e RBRACE
		{: RESULT = new method(curr_lineno(), obj, new Formals(curr_lineno()), type, e); :}
		
	// method with arguments
	|	OBJECTID:obj LPAREN formal_list:fl RPAREN COLON TYPEID:type LBRACE expr:e RBRACE
		{: RESULT = new method(curr_lineno(), obj, fl, type, e); :}
	// method without argument error case
	|	OBJECTID:obj LPAREN RPAREN COLON TYPEID:type LBRACE error RBRACE
		{:  :}
		
	// method with arguments error case
	|	OBJECTID:obj LPAREN formal_list:fl RPAREN COLON TYPEID:type LBRACE error RBRACE
		{:  :}
		
	;

/* one or more formals */	
formal_list
	// single element
	::=	formal:f
		{: RESULT = new Formals(curr_lineno()).appendElement(f); :}
	
	// multiple elements
	|	formal_list:fl COMMA formal:f
		{: RESULT = fl.appendElement(f); :}
	;
	
/* a formal represents an <ID,TYPE> pair */
formal
	::= OBJECTID:obj COLON TYPEID:type
		{: RESULT = new formalc(curr_lineno(), obj, type); :}
	;

/* one or more expressions, delimited by by comma */
expr_list_comma
	// one expression
	::=	expr:e
		{: RESULT = new Expressions(curr_lineno()).appendElement(e); :}
	// multiple expressions
	|	expr_list_comma:el COMMA expr:e
		{: RESULT = el.appendElement(e); :}
	;





/* case constructs */	
casebr_list
	::= casebr:c
		{: RESULT = new Cases(curr_lineno()).appendElement(c); :}
	|	casebr_list:cl casebr:c
		{: RESULT = cl.appendElement(c); :}
	;

casebr
	::= OBJECTID:obj COLON TYPEID:type DARROW expr:e SEMI
		{: RESULT = new branch(curr_lineno(), obj, type, e); :}
	;
	
/* let constructs */
letbr
	::= OBJECTID:obj COLON TYPEID:type IN expr:e	
		{: RESULT = new let(curr_lineno(), obj, type, new no_expr(curr_lineno()), e); :}
		
	|	OBJECTID:obj COLON TYPEID:type ASSIGN expr:init IN expr:e
		{: RESULT = new let(curr_lineno(), obj, type, init, e); :}
	
	|	OBJECTID:obj COLON TYPEID:type COMMA letbr:l	
		{: RESULT = new let(curr_lineno(), obj, type, new no_expr(curr_lineno()), l); :}
		
	|	OBJECTID:obj COLON TYPEID:type ASSIGN expr:init COMMA letbr:l	
		{: RESULT = new let(curr_lineno(), obj, type, init, l); :}

	// error case
	|	error COMMA letbr:l	
		{:  :}
	|	error letbr:l	
		{:  :}
		
	;


/* one or more expressions, each followed by a SEMI */
expr_list_geq1
	// one expression
	::= expr:e SEMI
		{: RESULT = new Expressions(curr_lineno()).appendElement(e); :}
	// error case
	|	error SEMI
		{: :}
		
	// multiple expressions
	|	expr_list_geq1:el expr:e SEMI
		{: RESULT = el.appendElement(e); :}
	;
	
expr
	::= OBJECTID:id ASSIGN expr:e
		{: RESULT = new assign(curr_lineno(),id,e); :}

	|	expr:e ERROR
		{: :}

	|	ERROR expr:e
		{: :}

	|	expr:e DOT OBJECTID:obj LPAREN RPAREN
		{: RESULT =  new dispatch(curr_lineno(), e, obj, new Expressions(curr_lineno())); :}

	|	expr:e DOT OBJECTID:obj LPAREN expr_list_comma:el RPAREN
		{: RESULT =  new dispatch(curr_lineno(), e, obj, el); :}

	|	expr:e AT TYPEID:p DOT OBJECTID:obj LPAREN RPAREN
		{: RESULT =  new static_dispatch(curr_lineno(), e, p, obj, new Expressions(curr_lineno())); :}

	|	expr:e AT TYPEID:p DOT OBJECTID:obj LPAREN expr_list_comma:el RPAREN
		{: RESULT =  new static_dispatch(curr_lineno(), e, p, obj, el); :}

	|	OBJECTID:obj LPAREN RPAREN
		{: RESULT =  new dispatch(curr_lineno(), new object(curr_lineno(),AbstractTable.idtable.addString("self")), obj, new Expressions(curr_lineno())); :}

	|	OBJECTID:obj LPAREN expr_list_comma:el RPAREN
		{: RESULT =  new dispatch(curr_lineno(), new object(curr_lineno(),AbstractTable.idtable.addString("self")), obj, el); :}

	|	IF expr:e1 THEN expr:e2 ELSE expr:e3 FI
		{: RESULT = new cond(curr_lineno(),e1,e2,e3); :}

	|	WHILE expr:e1 LOOP expr:e2 POOL
		{: RESULT = new loop(curr_lineno(),e1,e2); :}
	
	|	LBRACE expr_list_geq1:el RBRACE 
		{: RESULT = new block(curr_lineno(), el); :}

	// error cases
	|	LBRACE error RBRACE 
		{:  :}
		
	|	LET letbr:l
		{: RESULT = l; :}

	|	CASE expr:e OF casebr_list:cl ESAC
		{: RESULT = new typcase(curr_lineno(), e, cl); :}
		
	|	NEW TYPEID:id
		{: RESULT = new new_(curr_lineno(),id); :}
		
	|	ISVOID expr:e
		{: RESULT = new isvoid(curr_lineno(),e); :}
		
	|	expr:e1 PLUS expr:e2
		{: RESULT = new plus(curr_lineno(),e1,e2); :}
		
	|	expr:e1 MINUS expr:e2
		{: RESULT = new sub(curr_lineno(),e1,e2); :}
		
	|	expr:e1 MULT expr:e2
		{: RESULT = new mul(curr_lineno(),e1,e2); :}
		
	|	expr:e1 DIV expr:e2
		{: RESULT = new divide(curr_lineno(),e1,e2); :}
		
	|	NEG expr:e
		{: RESULT = new neg(curr_lineno(),e); :}
		
	|	expr:e1 LT expr:e2
		{: RESULT = new lt(curr_lineno(),e1,e2); :}
		
	|	expr:e1 LE expr:e2
		{: RESULT = new leq(curr_lineno(),e1,e2); :}
		
	|	expr:e1 EQ expr:e2
		{: RESULT = new eq(curr_lineno(),e1,e2); :}
		
	|	NOT expr:e
		{: RESULT = new comp(curr_lineno(),e); :}
		
	|	LPAREN expr:e RPAREN	
		{: RESULT = e; :}
		
	|	OBJECTID:id
		{: RESULT = new object(curr_lineno(),id); :}
		
	|	INT_CONST:i
		{: RESULT = new int_const(curr_lineno(),i); :}
		
	|	STR_CONST:s
		{: RESULT = new string_const(curr_lineno(),s); :}
		
	|	BOOL_CONST:b
		{: RESULT = new bool_const(curr_lineno(),b); :}
		
	;
/* 
expr
	::= INT_CONST:val
		{: RESULT = new int_const(curr_lineno(), val); :}
	;
*/
