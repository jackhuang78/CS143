README file for Programming Assignment 3 (Java edition)
======================================================

Your directory should now contain the following files:

 ASTConstants.java    -> [class dir]/src/PA3J/ASTConstants.java
 ASTLexer.java	      -> [class dir]/src/PA3J/ASTLexer.java
 ASTParser.java	      -> [class dir]/src/PA3J/ASTParser.java
 AbstractSymbol.java  -> [class dir]/src/PA3J/AbstractSymbol.java
 AbstractTable.java   -> [class dir]/src/PA3J/AbstractTable.java
 BoolConst.java       -> [course dir]/src/PA3J/BoolConst.java
 ClassTable.java
 Flags.java	      -> [class dir]/src/PA3J/Flags.java
 IdSymbol.java	      -> [class dir]/src/PA3J/IdSymbol.java
 IdTable.java	      -> [class dir]/src/PA3J/IdTable.java
 IntSymbol.java	      -> [class dir]/src/PA3J/IntSymbol.java
 IntTable.java	      -> [class dir]/src/PA3J/IntTable.java
 ListNode.java	      -> [class dir]/src/PA3J/ListNode.java
 Makefile	      -> [class dir]/etc/../assignments/PA3J/Makefile
 README
 Semant.java	      -> [class dir]/src/PA3J/Semant.java
 StringSymbol.java    -> [class dir]/src/PA3J/StringSymbol.java
 StringTable.java     -> [class dir]/src/PA3J/StringTable.java
 SymbolTable.java     -> [class dir]/src/PA3J/SymbolTable.java
 SymtabExample.java   -> [class dir]/src/PA3J/SymtabExample.java
 TokenConstants.java  -> [class dir]/src/PA3J/TokenConstants.java
 TreeConstants.java
 TreeNode.java	      -> [class dir]/src/PA3J/TreeNode.java
 Utilities.java	      -> [class dir]/src/PA3J/Utilities.java
 bad.cl
 cool-tree.aps	      -> [class dir]/src/PA3J/cool-tree.aps
 cool-tree.java
 good.cl

	The Makefile contains targets for compiling and running your
	program. DO NOT MODIFY.

	The README contains this info. Part of the assignment is to fill
	the README with the write-up for your project. You should
	explain design decisions, explain why your code is correct, and
	why your test cases are adequate. It is part of the assignment
	to clearly and concisely explain things in text as well as to
	comment your code.  Just edit this file.

	good.cl and bad.cl test a few features of the semantic checker.
	You should add tests to ensure that good.cl exercises as many
	legal semantic combinations as possible and that bad.cl
	exercises as many kinds of semantic errors as possible.

	cool-tree.aps contains the definitions for the tree language
	which you use to construct the abstract syntax tree (AST). This
	file is provided for your reference.  DO NOT MODIFY.

        TreeNode.java and ListNode.java contain definitions used by the
        tree package. DO NOT MODIFY.  

        cool-tree.java specifies and gives an implementation of Cool ASTs
        (see the README for PA3 and the "Cool Tour").  In this
        assignment, you will need to add functions to the AST classes to
        store, fetch, and compute information about the AST.

   	You should NOT remove any definitions that are already present
   	in cool-tree.java.  These function and data members are required
   	for the system to function properly.

        You should add any fields and methods to the classes you need to
        perform semantic analysis.  You will need to add, for example,
        methods which traverse the expressions of the tree and implement
        the type-checking rules.  The entry point to the semantic
        analyzer is program.semant().

	ClassTable.java implements a placeholder class for a few useful
	methods.  Feel free to extend it to implement some real data
	strucutre.

	TreeConstants.java defined some useful symbol constants.  You
	may add some of your own, if you wish.

	ASTLexer.java, ASTParser.java, and ASTConstants.java implement a
	lexer and a parser for reading text representation of ASTs from
	console in the format produced by the parser phase. DO NOT
	MODIFY.

        Semant.java contains a driver to test the analyzer.  The main
        method reads an AST in text form from standard input, parses it,
        and then produces a type-annotated AST on standard output.  The
        script mycoolc can pass any of the standard flags to the
        semantic analyzer as well; for this assignment, -s (semantic
        analysis debug) may be useful as it sets a static variable
        Flags.semant_debug to "true".  If you want your semantic checker
        to print debug information when the option is set, write your
        debug code in the following format:

	      if (Flags.semant_debug)
	      {
		...
	      }

	semant_debug is provided as a convenience. You don't need to use
	the debugging flags if you don't want to. DON'T MODIFY
	Semant.java

	SymbolTable.java contains a symbol table implementation. Read
	the comments in the file and look at the example in
	SymtabExample.java.  You are not required to use this code, but
	you may find it useful. DO NOT MODIFY.

Instructions
------------

	To compile the example use of the symbol table, type

	% gmake symtab-example

	This creates a shell script to run the symbol table example.

	To compile your semantic analyzer program type:

	% gmake semant

	To test your semantic checker, type:

	% mysemant foo.cl

	mysemant is a version of mycoolc that omits code generation.
	mysemant parses all the cool files given on the command line and
	builds a single abstract syntax tree containing all class
	definitions appearing in the input files. Your semantic checker
	is then called on this abstract syntax tree.  If there are no
	errors, the program produces a type-annotated abstract syntax
	tree as output.

	To run your checker on the files good.cl and bad.cl type:

	% gmake dotest

	If you think your semantic checker is correct and behaves like
	the one we wrote, you can try to run mycoolc using your checker,
	your parser and also your lexical analyzer if you choose (see
	below for instructions).  Remember if your lexer, parser or
	checker behaves in an unexpected manner, you may get errors
	anywhere.

	To turnin your work type:

	% gmake submit-clean

	And run the "submit" program following the instructions on the
	course web page.
	
	Running "submit" will collect the files cool-tree.java,
	ClassTable.java, TreeConstants.java, good.cl, bad.cl,
	good.output, bad.output, and README. Don't forget to edit the
	README file to include your write-up, and to write your own test
	cases in good.cl and bad.cl.

 	You may turn in the assignment as many times as you like.
 	However, only the last version will be retained for grading.

	If you change architectures you must issue

	% gmake clean

	when you switch from one type of machine to the other.
	If at some point you get weird errors from the linker,	
	you probably forgot this step.

	GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

Write-up for PA4
----------------

***************************
*****     User ID     *****
***************************
user: yh3483
user: borui


**************************
*****     Design     *****
**************************

We break the sematic analysis into three phases, class check, feature check, 
and scope/type check. 

Phase 1: Class Check (ClassTable.java)
In this phase we construct an inheritance tree from all existing classes. As we 
build the tree, we check for the following errors:

	1.1. redefining basic or user-defined classes
	1.2. inheriting Int, Bool, String, or undefined classes
	1.3. cyclic inheritance
	1.4. absense of Main class

We stop the sematic analysis if there is any error in this phase. 



Phase 2: Feature Check (ClassTable.java)
In this phase we construct the object and method environments for each class. 
As we build the environments, we check for the following errors:

	2.1.1	declaring undefined class for attribute
	2.1.2	redefining attribute in superclass
	2.1.3	redefining attribute in the current class
	
	2.2.1	undefined class for parameter or return type	
	2.2.2	redefining method in the current class
	2.2.3	redefining method in superclass with different number of parameters
	2.2.3	redefining method in superclass with different parameter type or 
	return type
	2.2.4	duplicated parameter names
	2.2.5	absense of main method in Main class
	
Phase 3: Scope/Type Check (cool-tree.java)
In this phase perform scope and type check for each node in the AST. For each 
node, we recursively check the children nodes first and use the returned 
type information to check the current node. The type check rule is in accordance
to the COOL manual. 

For method, let statement, or case statement, we also enter/exit scope to allow
new variable or redefined variable. We use the updated scope to check for any 
undeclared identifier. 

If the type of a node cannot be determined because of type/scope error, we set 
the type to the type of the node to be Object.

***************************
*****     Testing     *****
***************************

We perform testing by comparing the results from our implementation to that 
from the reference solution. We construct various valid and invalid tests. 
These tests can be found under the tests directory. The bad.cl, bad2.cl contains
code with errors that can be recovered from the semantic analysis. good.cl,
easy.cl, and better.cl contains code that does not have any error. These files
are crafted to exhaustedly test the functionality of our code. The rest of
the test cases are related to checking class inheritance relationships.
Our implementation produces an equal amount of or more error messages than the 
reference in each test case.We have verified that the additional error messages 
we produce are in fact correct according to the COOL sematic rules.


