README file for Programming Assignment 4  (Java edition)
=======================================================

Your directory should now contain the following files:

 ASTConstants.java    -> [course dir]/src/PA4J/ASTConstants.java
 ASTLexer.java	      -> [course dir]/src/PA4J/ASTLexer.java
 ASTParser.java	      -> [course dir]/src/PA4J/ASTParser.java
 AbstractSymbol.java  -> [course dir]/src/PA4J/AbstractSymbol.java
 AbstractTable.java   -> [course dir]/src/PA4J/AbstractTable.java
 BoolConst.java
 Cgen.java	      -> [course dir]/src/PA4J/Cgen.java
 CgenClassTable.java
 CgenNode.java
 CgenSupport.java
 ClassTable.java      -> [course dir]/src/PA4J/ClassTable.java
 Flags.java	      -> [course dir]/src/PA4J/Flags.java
 IdSymbol.java	      -> [course dir]/src/PA4J/IdSymbol.java
 IdTable.java	      -> [course dir]/src/PA4J/IdTable.java
 IntSymbol.java
 IntTable.java	      -> [course dir]/src/PA4J/IntTable.java
 ListNode.java	      -> [course dir]/src/PA4J/ListNode.java
 Makefile	      -> [course dir]/assignments/PA4J/Makefile
 README
 StringSymbol.java
 StringTable.java     -> [course dir]/src/PA4J/StringTable.java
 SymbolTable.java     -> [course dir]/src/PA4J/SymbolTable.java
 SymtabExample.java   -> [course dir]/src/PA4J/SymtabExample.java
 TokenConstants.java  -> [course dir]/src/PA4J/TokenConstants.java
 TreeConstants.java
 TreeNode.java        -> [course dir]/src/PA4J/TreeNode.java
 Utilities.java	      -> [course dir]/src/PA4J/Utilities.java
 cool-tree.aps	      -> [course dir]/src/PA4J/cool-tree.aps
 cool-tree.java
 example.cl

	The Makefile contains targets for compiling and running your
	program, as well as handing it in. DO NOT MODIFY.

	The README contains this info. Part of the assignment is to
	fill the README with the write-up for your project. You should
	explain design decisions, explain why your code is correct,
	and why your test cases are adequate. It is part of the
	assignment to clearly and concisely explain things in text as
	well as to comment your code. Just edit this file.

	In example.cl you should write a correct Cool program which
	tests as many aspects of the code generator as possible. It
	should pass your code generator, and running spim on the
	generated output should run the program correctly.

	CgenClassTable.java CgenNode.java are the skeleton files for
	the code generator. These skeletons are much larger than the
	ones for previous assignments.  The skeletons provides three
	components of the code generator:

		- functions to build the inheritance graph; (we supply
		  this in case you didn't get this working for PA4)

		- functions to emit global data and constants;
		 
	You should work to understand this code, and it will help you
        write the rest of the code generator.

        TreeNode.java and ListNode.java contain definitions used by
        the tree package. DO NOT MODIFY.

        cool-tree.java specifies and give an implementation of Cool
        ASTs (see the README for PA3 and the "Cool Tour").  In this
        assignment, you will need to complete the code generating
        methods for all Cool expression nodes.

	BoolConst.java, IntSymbol.java, and StringSymbol.java are used
        to manage constants in Cool programs.  You will need to
        complete the method for generating constant definitions in
        each of these classes.

	CgenSupport.java is general support code for the code
	generator.  You can add functions and constants as you see
	fit, but do not modify anything that's already there.  This
	class also serves as a placeholder for a bunch of constants as
	well as functions to emit spim instructions (we supply these
	to save you some tedious coding).

	TreeConstants.java defined some useful symbol constants.  You
	may add some of your own, if you wish.

	ASTLexer.java, ASTParser.java, and ASTConstants.java implement
	a lexer and a parser for reading text representation of ASTs
	from console in the format produced by the parser phase. DO
	NOT MODIFY.

	Cgen.java supplies the driver for the compiler. You should not
        modify this code.  The script mycoolc can pass any of the
        standard flags to the code generator; for this assignment, -c
        (code generator debug) may be useful as it sets a global
        variable cgen_debug to true (1).  If you want your code
        generator to print debug information when the option is set,
        write your debug code in the following format:

	      if (cgen_debug)
	      {
		...
	      }

	SymbolTable.java contains a symbol table implementation. Read
	the comments in the file and look at the example in
	SymtabExample.java.  You are not required to use this code,
	but you may find it useful. DO NOT MODIFY.

Instructions
------------

	To compile your compiler and code generator type:

	% make cgen

	To test your compiler, type:

	% ./mycoolc <file1.cl>

	This command parses all the cool files given on the command
	line, passes them through the semantic checker, and then hands
	the program AST to your code generator.

	To run your compiler on the file example.cl, type:

	% make dotest

	To run the produced code:

	% spim -file file1.s  /* or the output filename you chose */
	
	To submit your work type:

	% make submit

	And run the "submit" program following the instructions on the
	course web page.
	
 	You may turn in the assignment as many times as you like.
 	However, only the last version will be retained for grading.

	If you change architectures you must issue

	% make clean

	when you switch from one type of machine to the other.  If at
	some point you get weird errors from the linker, you probably
	forgot this step.

	GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

Write-up for PA4
----------------

***************************
*****     User ID     *****
***************************
user: yh3483
user: borui

**************************
*****     Design     *****
**************************

We follow the design requirement in PA4. Specifically we emit prototype objects,
class nameTabs, class objTabs, and dispatch tables in CgenClassTable and we follow
the runtime guideline in Cool during this process.

We emit code for the running methods, loops, assignments, branches, lets , etc.
in cool-tree.java. Variable scopes and the stack are also managed in cool-tree.java.
We added helpers for emitting code for comparisons and arithmetic operations in
CgenSupport.

For branches, we utilize the tag number of classes to infer whether we should accept
a branch by looking at the max tag number and min tag number of the children of the
branch's type. We assign tags in a depth first manner when building the inheritance 
tree. 

We handled runtime errors (dispatch on void, case on void, and missing branch) in
our code properly and we tested error handling in our test modules (see test section).

Our implementation complies with the garbage collection requirement specified in the
runtime manual when Flags.cgen_Memmgr != Flags.GC_NOGC.

***************************
*****     Testing     *****
***************************

We perform testing by:

1. Creating test cases for each specific language feature such as case, let, cond,
loop, assign, comp, arith ,.etc and tested mycoolc against the reference coolc.

We make sure the outputs in these test cases are the same between two code generators.
While writing these tests, we also make sure our outputs reflect the logic of the
code flow to make sure we pass all cases we can come up with.

2. Running test cases in /usr/class/cs143/examples and compare the output of our 
code generator with the reference and make sure they're identical. Note that for
interactive tests, we manually played with the programs to make sure the generated
programs have similar behaviors.

For garbage collection, we created test cases that would exhaust the heap without GC
but running fine with the GC to verify the GC works correctly. These includes massive
allocations both on stack (references) and heap (object assignments) in loops and
other scenarios. These test cases reside in gc.cl and gccyle.cl.
